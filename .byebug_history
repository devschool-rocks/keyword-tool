exit
rankings
c
data
exit
Serp.all
URI.decode(params[:id])
params[:domain_id]
c
Ranking.by_domain(params[:ranking_id])
exit
theirs.reduce({}) {| git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim/crow| acc[row.domain.value.to_sym] }
theirs.reduce({}) {|acc, row| acc[row.domain.value.to_sym] }
theirs.reduce({}) {|acc, row| row.domain.value.to_sym }
theirs.reduce({}) {|acc, row| acc[row.domain.value.to_sym] => 1 }
theirs.reduce({}) {|acc, row| acc["#{row.domain.value}"] => 1 }
theirs.reduce({}) {|acc, row| acc["#{row.domain.value}"] = 1 }
theirs.reduce({}) {|acc, row| acc[row.domain.value.to_sym] = 1 }
theirs.reduce({}) {|acc, row| acc[row.domain.value] = 1 }
theirs.reduce({}) {|acc, row| acc[row.domain.value = 1 }
theirs.reduce({}) {|acc, row| row }
theirs.reduce({}) {|acc, row| acc }
theirs.reduce({}) {|acc, row| p row.domain.value }
theirs.reduce({}) {|acc, row| p row.domain }
theirs.reduce({}) {|acc, row| p row }
theirs.reduce({}) do |acc, row|
theirs.reduce({}) {|acc, row| acc[row.domain.value] = [row.position] }
c
args
name
c
data.select do |row| them.include?(row.domain.value) end
theirs
c
@position
c
@rankings
c
@rankings
c
attrs
c
attrs
exit
row.domain.value
row.domain
row
c
row
exit
r
c
attrs
c
data.map {|r| byebug }
them
c
attrs
c
attrs
c
our = data.select {|r| r.domain.value  == us && r.keyword.value == kw}[0]
c
data.select {|r| r.domain == 'devschool.rocks' }
data
kw
kq
c
exit
grid
